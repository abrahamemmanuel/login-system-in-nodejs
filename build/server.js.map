{"version":3,"sources":["../src/server.js"],"names":["app","require","passport","use","express","static","path","join","__dirname","set","urlencoded","extended","redis","client","createClient","RedisStore","session","store","secret","resave","saveUninitialized","initialize","req","res","next","locals","success_msg","flash","error_msg","error","router","db","process","env","MONGODB_URI","key","LOCALDB_URI","mongoose","connect","useNewUrlParser","then","console","log","catch","err","get","render","module","parent","listen"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,GAAG,GAAG,uBAAZ,C,CAEA;;AACAC,OAAO,CAAC,mBAAD,CAAP,CAA6BC,iBAA7B,E,CAEA;;;AACAF,GAAG,CAACG,GAAJ,CAAQC,iBAAQC,MAAR,CAAeC,cAAKC,IAAL,CAAUC,SAAV,EAAqB,WAArB,CAAf,CAAR;AACAR,GAAG,CAACG,GAAJ,CAAQ,MAAR,EAAgBC,iBAAQC,MAAR,CAAeC,cAAKC,IAAL,CAAUC,SAAV,EAAqB,YAArB,CAAf,CAAhB,E,CACA;;AACAR,GAAG,CAACS,GAAJ,CAAQ,OAAR,EAAiB,SAAjB;AACAT,GAAG,CAACS,GAAJ,CAAQ,aAAR,EAAuB,KAAvB,E,CAEA;AACA;AACA;AAIA;;AACAT,GAAG,CAACG,GAAJ,CAAQC,iBAAQM,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAR,E,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,KAAK,GAAGX,OAAO,CAAC,OAAD,CAArB;AAAA,IAEAY,MAAM,GAAGD,KAAK,CAACE,YAAN,EAFT;;AAIA,IAAMC,UAAU,GAAGd,OAAO,CAAC,eAAD,CAAP,CAAyBe,uBAAzB,CAAnB,C,CACA;;;AAEAhB,GAAG,CAACG,GAAJ,CAAQ,6BAAQ;AACZc,EAAAA,KAAK,EAAE,IAAIF,UAAJ,CAAe;AAAEF,IAAAA,MAAM,EAAGA;AAAX,GAAf,CADK;AAEZK,EAAAA,MAAM,EAAE,cAFI;AAGZC,EAAAA,MAAM,EAAE,IAHI;AAIZC,EAAAA,iBAAiB,EAAE;AAJP,CAAR,CAAR,E,CAQA;;AACApB,GAAG,CAACG,GAAJ,CAAQD,kBAASmB,UAAT,EAAR;AACArB,GAAG,CAACG,GAAJ,CAAQD,kBAASc,OAAT,EAAR,E,CAEA;;AACAhB,GAAG,CAACG,GAAJ,CAAQ,4BAAR,E,CAEA;;AACAH,GAAG,CAACG,GAAJ,CAAQ,UAACmB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1BD,EAAAA,GAAG,CAACE,MAAJ,CAAWC,WAAX,GAAyBJ,GAAG,CAACK,KAAJ,CAAU,aAAV,CAAzB;AACAJ,EAAAA,GAAG,CAACE,MAAJ,CAAWG,SAAX,GAAuBN,GAAG,CAACK,KAAJ,CAAU,WAAV,CAAvB;AACAJ,EAAAA,GAAG,CAACE,MAAJ,CAAWI,KAAX,GAAmBP,GAAG,CAACK,KAAJ,CAAU,OAAV,CAAnB;AACAH,EAAAA,IAAI;AACL,CALD,E,CAOA;;AACAxB,GAAG,CAACG,GAAJ,CAAQ2B,cAAR,E,CAEA;;AACA,IAAMC,EAAE,GAAGC,OAAO,CAACC,GAAR,CAAYC,WAAZ,IAA2BC,cAAIC,WAA1C,C,CAEA;;AACAC,kBAASC,OAAT,CAAiBP,EAAjB,EAAqB;AAAEQ,EAAAA,eAAe,EAAE;AAAnB,CAArB,EAAgDC,IAAhD,CAAqD;AAAA,SAAMC,OAAO,CAACC,GAAR,CAAY,sBAAZ,CAAN;AAAA,CAArD,EAAgGC,KAAhG,CAAsG,UAAAC,GAAG;AAAA,SAAIH,OAAO,CAACC,GAAR,CAAYE,GAAZ,CAAJ;AAAA,CAAzG,E,CAIA;AACA;AACA;AACA;;;AAEA5C,GAAG,CAAC6C,GAAJ,CAAQ,GAAR,EAAa,UAACvB,GAAD,EAAMC,GAAN,EAAc;AACzB,SAAQA,GAAG,CAACuB,MAAJ,CAAW,SAAX,CAAR;AACA,CAFF;;AAMA,IAAI,CAACC,MAAM,CAACC,MAAZ,EAAoB;AAAEhD,EAAAA,GAAG,CAACiD,MAAJ,CAAWd,cAAIF,GAAf,EAAoB;AAAA,WAAMQ,OAAO,CAACC,GAAR,kCAAsCP,cAAIF,GAA1C,EAAN;AAAA,GAApB;AAA8E,C,CAAA;AAEpG;;;eAEejC,G","sourcesContent":["import express from 'express';\nimport passport from 'passport';\nimport expressLayouts from 'express-ejs-layouts';\nimport flash from 'connect-flash';\nimport session from 'express-session';\nimport mongoose from 'mongoose';\nimport key from './config/keys';\nimport router from './routes/index';\nimport path from 'path';\n\nconst app = express();\n\n// Passport Config\nrequire('./config/passport')(passport);\n\n//Static folder\napp.use(express.static(path.join(__dirname, './public/')));\napp.use('/css', express.static(path.join(__dirname, 'public/css')));\n//Set View Engine\napp.set('views', './views');\napp.set('view engine', 'ejs');\n\n// // EJS\n// app.use(expressLayouts);\n// app.set('view engine', 'ejs');\n\n\n\n// Bodyparser\napp.use(express.urlencoded({ extended: true }));\n\n\n\n// Express session\n// app.use(\n//     session({\n//       secret: 'secret',\n//       resave: true,\n//       saveUninitialized: true\n//     })\n//   );\n\n// SessionStore = require('session-mongoose')(express)\n\n// app.use(\n//   express.session({\n//     store: new SessionStore({\n//     url: db,\n//     interval: 1200000\n//   }),\n//   cookie: { maxAge: 1200000 },\n//   secret: 'my secret'\n// }))\n\nconst redis = require(\"redis\"),\n\nclient = redis.createClient();\n\nconst RedisStore = require('connect-redis')(session);\n//var sessionStore = new redisStore({ client : client });\n \napp.use(session({\n    store: new RedisStore({ client : client }),\n    secret: 'keyboard cat',\n    resave: true,\n    saveUninitialized: true\n}));\n\n\n//Passport middleware\napp.use(passport.initialize());\napp.use(passport.session());\n\n// Connect flashhero\napp.use(flash());\n\n// Global Vars\napp.use((req, res, next) => {\n  res.locals.success_msg = req.flash('success_msg');\n  res.locals.error_msg = req.flash('error_msg');\n  res.locals.error = req.flash('error');\n  next();\n});\n\n// Routes\napp.use(router);\n\n// DB Config\nconst db = process.env.MONGODB_URI || key.LOCALDB_URI;\n\n// Connect to MongoDB\nmongoose.connect(db, { useNewUrlParser: true }).then(() => console.log('MongoDB Connected...')).catch(err => console.log(err));\n\n\n\n// @route   /\n// @desc     Get the landing page\n// @access   Public\n// @method   GET\n\napp.get('/', (req, res) => {\n  return  res.render('welcome');\n });\n\n\n\nif (!module.parent) { app.listen(key.env, () => console.log(`Server running on port ${key.env}`)); }// eslint-disable-line no-console\n\n// app.listen(key.env, () => {console.log(`Server running on port ${key.env}`)});\n\nexport default app;\n"],"file":"server.js"}